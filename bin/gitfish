#!/usr/bin/env node
var path = require('path');
var forever = require('forever');
var subarg = require('subarg');
var argv = subarg(process.argv.slice(2));

var action = argv._.join(''); // join action to fail on multiple or error
var daemonize = (typeof argv.daemonize !== 'undefined');

// forced forever options
var options = {
    silent: false,
    killTree: true,
    minUptime: 4000,
    spinSleepTime: 2000,
    sourceDir: path.resolve(__dirname, '..'),
    options: []
};

// read forever options from command line args or default
if (argv.config) {
    options.options.push('--config');
    options.options.push(argv.config);
}

if (argv.port) {
    options.options.push('--port');
    options.options.push(argv.port);
}

if (argv.token) {
    options.options.push('--token');
    options.options.push(argv.token);
}

options.logFile = argv.logFile || '/tmp/gitfish.log';
options.pidFile = argv.pidFile || '/tmp/gitfish.pid';

if (daemonize) {
    // log to console when not daemonized
    options.outFile = argv.outFile || options.logFile;
    options.errFile = argv.errFile || options.logFile;
}

if (argv.plain) {
    options.plain = argv.plain;
}
if (argv.verbose) {
    options.verbose = argv.verbose;
}
if (argv.debug) {
    options.debug = argv.debug;
}

var script = 'index.js';
//var gitfish = new (forever.Monitor)(script, options);

switch (action) {
    case 'status':
        list(function (err, msg) {
            if (err) {
                usage(err);
            }

            if (msg) {
                console.log('gitfish is currently running');
                console.log(msg);
            } else {
                console.log('gitfish is not running');
            }
        });
        break;
    case 'start':
        list(function (err, msg) {
            if (err) {
                usage(err);
            }

            if (msg) {
                console.log('gitfish is currently running');
                console.log(msg);
            } else {
                if (daemonize) {
                    console.log('Starting gitfish:');
                    forever.startDaemon(script, options);

                    // give it a sec...
                    setTimeout(function () {
                        list(function (err, msg) {
                            if (msg) {
                                console.log('> started as:');
                                console.log(msg);
                            } else {
                                console.trace(new Error('running gitfish instance expected but not found'));
                            }
                        });
                    }, 500);
                } else {
                    var child = forever.start(script, options);
                    forever.startServer(child);
                }
            }
        });
        break;
    case 'stop':
        list(function (err, msg) {
            if (err) {
                usage(err);
            }

            if (!msg) {
                console.log('gitfish is not running');
            } else {
                console.log('Stopping gitfish:');
                console.log(msg);
                forever.stop(script);

                setTimeout(function () {
                    list(function (err, msg) {
                        if (!msg) {
                            console.log('> stopped.');
                        }
                    });
                }, 500);
            }
            });
        break;
    case 'restart':
        list(function (err, msg) {
            if (err) {
                usage(err);
            }

            if (!msg) {
                console.log('gitfish is not running');
            } else {
                console.log('Restarting gitfish');
                forever.restart(script);
                // give it a sec...
                setTimeout(function () {
                    list(function (err, msg) {
                        if (msg) {
                            console.log('> restarted as:');
                            console.log(msg);
                        } else {
                            console.trace(new Error('running gitfish instance expected but not found'));
                        }
                    });
                }, 500);
            }
        });
        break;
    default: usage();
}

function list(callback) {
    forever.list(script, callback);
}

function usage(err) {
    var exitStatus = 0;
    if (err) {
        console.error('An error occured.');
        console.trace(err);
        exitStatus = 1;
    }

    console.log('Usage: gitfish [forever options] action\n'
              + '\n'
              + ' Gitfish Actions\n'
              + '\n'
              + '   start\n'
              + '   stop\n'
              + '   restart\n'
              + '   status\n'
              + '   help\n'
              + '\n'
              + ' Optional Gitfish Options\n'
              + '\n'
              + '   --daemonize : start gitfish daemonized\n'
              + '   --config    : default is `$CWD/config.json`\n'
              + '   --port      : overide port from config\n'
              + '   --token     : overide token from config\n'
              + '\n'
              + ' Supported Forever Options\n'
              + '\n'
              + '   --logFile [file] : forever log file location # default: /tmp/gitfish.log\n'
              + '   --outFile [file] : stdout file location      # default: forever log file\n'
              + '   --errFile [file] : stderr file location      # default: forever log file\n'
              + '   --pidFile [file] : pid file location         # default: /tmp/gitfish.pid\n'
              + '   --max     [n]    : max restarts on error\n'
              + '   --plain          : disable command line colors\n'
              + '   --verbose        : verbose forever output\n'
              + '\n'
              + ' What is forever? https://github.com/nodejitsu/forever\n');

    process.exit(exitStatus);
}

